[{"D:\\Destop\\TypeScript\\numer\\src\\index.js":"1","D:\\Destop\\TypeScript\\numer\\src\\App.js":"2","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Gauss.js":"3","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Jacobi.js":"4","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Bisection.js":"5","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\LU.js":"6","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Onepoint.js":"7","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Graphical.js":"8","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Secant.js":"9","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Seidel.js":"10","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\False_position.js":"11","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Newton-raphson.js":"12","D:\\Destop\\TypeScript\\numer\\src\\services\\Services.js":"13","D:\\Destop\\TypeScript\\numer\\src\\components\\Graph.js":"14"},{"size":480,"mtime":1647567924000,"results":"15","hashOfConfig":"16"},{"size":4759,"mtime":1653241622264,"results":"17","hashOfConfig":"16"},{"size":6489,"mtime":1653494845378,"results":"18","hashOfConfig":"16"},{"size":8250,"mtime":1653494881289,"results":"19","hashOfConfig":"16"},{"size":6390,"mtime":1653493861608,"results":"20","hashOfConfig":"16"},{"size":5491,"mtime":1653494892753,"results":"21","hashOfConfig":"16"},{"size":5230,"mtime":1653493570428,"results":"22","hashOfConfig":"16"},{"size":4448,"mtime":1653491879404,"results":"23","hashOfConfig":"16"},{"size":5738,"mtime":1653494250136,"results":"24","hashOfConfig":"16"},{"size":8363,"mtime":1653494909618,"results":"25","hashOfConfig":"16"},{"size":6646,"mtime":1653494057573,"results":"26","hashOfConfig":"16"},{"size":5300,"mtime":1653493114313,"results":"27","hashOfConfig":"16"},{"size":3318,"mtime":1653512793324,"results":"28","hashOfConfig":"16"},{"size":805,"mtime":1653241518464,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1br86oi",{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"D:\\Destop\\TypeScript\\numer\\src\\index.js",[],["64","65"],"D:\\Destop\\TypeScript\\numer\\src\\App.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Gauss.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Jacobi.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Bisection.js",["66"],"import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { error, func, bisection_API } from '../../services/Services';\nimport Graph from '../../components/Graph';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"XL\",\n        dataIndex: \"xl\",\n        key: \"xl\"\n    },\n    {\n        title: \"XR\",\n        dataIndex: \"xr\",\n        key: \"xr\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Bisection extends Component {\n\n    constructor() {\n        super();\n        this.state = this.getInitialState();\n        this.handleChange = this.handleChange.bind(this);\n        this.bisection = this.bisection.bind(this);\n        this.handleAPI = this.handleAPI.bind(this);\n    }\n\n    getInitialState = () => ({\n        fx: \"\",\n        xl: 0,\n        xr: 0,\n        showOutputCard: false,\n        showGraph: false,\n        moveLeft: false  \n    })\n\n    bisection(xl, xr) {\n        var increaseFunction = false;\n        var xm = 0;\n        var sum = parseFloat(0.000000);\n        var n = 0;\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n        if (func(this.state.fx, xl) < func(this.state.fx, xr)) {\n            increaseFunction = true;\n        }\n\n        do {\n            xm = (xl + xr) / 2;\n            if (func(this.state.fx, xm) * func(this.state.fx, xr) < 0) {\n                sum = error(xm, xr);\n                if (increaseFunction) {\n                    xl = xm;\n                }\n                else {\n                    xr = xm;\n                }\n\n            }\n            else {\n                sum = error(xm, xl);\n                if (increaseFunction) {\n                    xr = xm;\n                }\n                else {\n                    xl = xm;\n                }\n            }\n            data['xl'][n] = xl;\n            data['xr'][n] = xr;\n            data['x'][n] = xm.toFixed(8);\n            data['error'][n] = Math.abs(sum).toFixed(8);\n            n++;\n        } while (Math.abs(sum) > 0.000001);\n        this.createTable(data['xl'], data['xr'], data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true,\n\n        })\n\n\n    }\n\n    async handleAPI() {\n    \n        const response = await bisection_API();\n        console.log(response);\n        this.setState({\n            fx: response.fx,\n            xl: response.xl,\n            xr: response.xr\n        })\n        const { fx, xl, xr } = this.state;\n\n        this.bisection(parseFloat(xl), parseFloat(xr));\n        \n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    }\n    render() {\n        let { fx, xl, xr } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Bisection</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"#f2f2f2\", borderRadius:\"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                            id=\"inputCard\"\n                        >\n                            <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h2>X<sub>L</sub></h2><Input size=\"large\" name=\"xl\" style={InputStyle}></Input>\n                            <h2>X<sub>R</sub></h2><Input size=\"large\" name=\"xr\" style={InputStyle}></Input><br /><br />\n                            <div className=\"row\">\n                                <div className=\"col-3\">\n                                    <Button id=\"submit_button\" onClick={\n                                    () => this.bisection(parseFloat(xl), parseFloat(xr))\n                                }\n                                    style={{ background: \"#4caf50\", color: \"white\" }}>Submit</Button>\n                                </div>\n                                <div className=\"col\">\n                                    <Button id=\"submit_button_api\" onClick={() => this.handleAPI()}\n                                    style={{ background: \"blue\", color: \"white\" }}>Calculate from data that get from API</Button>\n                                </div>\n                            </div>\n\n\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Bisection Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#f2f2f2\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            \n                            <label style={{color: \"black\"}}>f(x): {fx}</label><br/>\n                            <label style={{color: \"black\"}}>X<sub>L</sub>: {xl}</label><br/>\n                            <label style={{color: \"black\"}}>X<sub>L</sub>: {xr}</label><br/>\n                            <Table pagination={{defaultPageSize: 5}} columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n        );\n    }\n}\nexport default Bisection;","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\LU.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Onepoint.js",["67"],"import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { error, func, onepoint_API } from '../../services/Services';\nimport Graph from '../../components/Graph';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Onepoint extends Component {\n\n    constructor() {\n        super();\n        /*\n        this.state = {\n            fx: \"\",\n            x0: 0,\n            showOutputCard: false,\n            showGraph: false\n        }\n        */\n        this.state = this.getInitialState();\n        this.handleChange = this.handleChange.bind(this);\n        this.onepoint = this.onepoint.bind(this);\n    }\n\n    getInitialState = () => ({\n        fx: \"\",\n        x0: 0,\n        showOutputCard: false,\n        showGraph: false\n    })\n\n    onepoint(xold) {\n        var xnew = 0;\n        var epsilon = parseFloat(0.000000);\n        var n = 0;\n        var data = []\n        data['x'] = []\n        data['error'] = []\n\n        do {\n            xnew = func(this.state.fx, xold);\n            epsilon = error(xnew, xold)\n            data['x'][n] = xnew.toFixed(8);\n            data['error'][n] = Math.abs(epsilon).toFixed(8);\n            n++;\n            xold = xnew;\n\n        } while (Math.abs(epsilon) > 0.000001);\n\n        this.createTable(data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true\n        })\n    }\n\n    createTable(x, error) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    async handleAPI() {\n\n        const response = await onepoint_API();\n        console.log(response);\n        this.setState({\n            fx: response.fx,\n            xold: response.xl,\n        })\n        const { fx, xold } = this.state;\n\n        this.onepoint(parseFloat(xold));\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    render() {\n        let { fx, x0 } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>One Point Iteration</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"#f2f2f2\", borderRadius: \"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h2>X<sub>0</sub></h2><Input size=\"large\" name=\"x0\" style={InputStyle}></Input><br /><br />\n                            <div className=\"row\">\n                                <div className=\"col-3\">\n                                    <Button id=\"submit_button\" onClick={\n                                        () => this.onepoint(parseFloat(x0))\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>Submit</Button>\n                                </div>\n                                <div className=\"col\">\n                                    <Button id=\"submit_button_api\" onClick={() => this.handleAPI()}\n                                        style={{ background: \"blue\", color: \"white\" }}>Calculate from data that get from API</Button>\n                                </div>\n                            </div>\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"One Point Iteration Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#f2f2f2\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <label style={{ color: \"black\" }}>f(x): {fx}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>0</sub>: {x0}</label><br />\n                            <Table columns={columns} bordered={true} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}>\n                            </Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n\n\n        );\n    }\n}\nexport default Onepoint;","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Graphical.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Secant.js",["68"],"import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { error, func, secant_API } from '../../services/Services';\nimport Graph from '../../components/Graph';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"Y\",\n        dataIndex: \"y\",\n        key: \"y\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Secant extends Component {\n    constructor() {\n        super();\n        /*\n        this.state = {\n            fx: \"\",\n            x0: 0,\n            x1: 0,\n            showOutputCard: false,\n            showGraph: false\n        }\n        */\n        this.state = this.getInitialState();\n        this.handleChange = this.handleChange.bind(this);\n        this.secant = this.secant.bind(this);\n        this.handleAPI = this.handleAPI.bind(this);\n    }\n\n    getInitialState = () => ({\n        fx: \"\",\n        x0: 0,\n        x1: 0,\n        showOutputCard: false,\n        showGraph: false\n    })\n\n    secant(x0, x1) {\n        var x = [], y = 0, epsilon = parseFloat(0.000000);\n        var n = 1, i = 1;\n        var data = []\n        data['y'] = []\n        data['error'] = []\n        x.push(x0);\n        x.push(x1);\n        data['y'][0] = x0;\n        data['error'][0] = \"---\";\n\n        do {\n            y = x[i] - (func(this.state.fx, x[i]) * ((x[i] - x[i - 1]))) / (func(this.state.fx, x[i]) - func(this.state.fx, x[i - 1]));\n            x.push(y);\n            epsilon = error(y, x[i]);\n            data['y'][n] = y.toFixed(8);\n            data['error'][n] = Math.abs(epsilon).toFixed(8);\n\n            n++;\n            i++;\n\n        } while (Math.abs(epsilon) > 0.000001);\n        this.createTable(data['y'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true\n        })\n\n\n    }\n\n    createTable(y, error) {\n        dataInTable = []\n        for (var i = 0; i < y.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                y: y[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    async handleAPI() {\n\n        const response = await secant_API();\n        console.log(response);\n        this.setState({\n            fx: response.fx,\n            x0: response.xl,\n            x1: response.xr\n        })\n        const { fx, x0, x1 } = this.state;\n\n        this.secant(parseFloat(x0), parseFloat(x1));\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    render() {\n        let { fx, x0, x1 } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Secant Method</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"#f2f2f2\", borderRadius: \"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h2>X<sub>0</sub></h2><Input size=\"large\" name=\"x0\" style={InputStyle}></Input>\n                            <h2>X<sub>1</sub></h2><Input size=\"large\" name=\"x1\" style={InputStyle}></Input><br /><br />\n                            <div className=\"row\">\n                                <div className=\"col-3\">\n                                    <Button id=\"submit_button\" onClick={\n                                        () => this.secant(parseFloat(x0), parseFloat(x1))\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>Submit</Button>\n                                </div>\n                                <div className=\"col\">\n                                    <Button id=\"submit_button_api\" onClick={() => this.handleAPI()}\n                                        style={{ background: \"blue\", color: \"white\" }}>Calculate from data that get from API</Button>\n                                </div>\n                            </div>\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Secant Method\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#f2f2f2\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <label style={{ color: \"black\" }}>f(x): {fx}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>0</sub>: {x0}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>1</sub>: {x1}</label><br />\n                            <Table columns={columns} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}\n                            ></Table>\n                        </Card>\n                    }\n                </div>\n\n            </div>\n\n        );\n    }\n}\nexport default Secant;\n\n\n\n\n","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Linear Algebra\\Seidel.js",[],"D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\False_position.js",["69"],"import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\n\nimport { error, func, falsepos_API } from '../../services/Services';\nimport Graph from '../../components/Graph';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n};\nvar dataInTable = []\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"XL\",\n        dataIndex: \"xl\",\n        key: \"xl\"\n    },\n    {\n        title: \"XR\",\n        dataIndex: \"xr\",\n        key: \"xr\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass FalsePosition extends Component {\n\n    constructor() {\n        super();\n        /*\n        this.state = {\n            fx: \"\",\n            xl: 0,\n            xr: 0,\n            showOutputCard: false,\n            showGraph: false\n        }\n        */\n        this.state = this.getInitialState();\n        this.handleChange = this.handleChange.bind(this);\n        this.false_position = this.false_position.bind(this);\n        this.handleAPI = this.handleAPI.bind(this);\n    }\n\n    getInitialState = () => ({\n        fx: \"\",\n        xl: 0,\n        xr: 0,\n        showOutputCard: false,\n        showGraph: false\n    })\n\n    false_position(xl, xr) {\n        var increaseFunction = false;\n        var xi = 0;\n        var epsilon = parseFloat(0.000000);\n        var n = 0;\n        var data = []\n        data['xl'] = []\n        data['xr'] = []\n        data['x'] = []\n        data['error'] = []\n        if (func(this.state.fx, xl) < func(this.state.fx, xr)) {\n            increaseFunction = true;\n        }\n        do {\n            xi = (xl * func(this.state.fx, xr) - xr * func(this.state.fx, xl)) / (func(this.state.fx, xr) - func(this.state.fx, xl));\n            if (func(this.state.fx, xi) * func(this.state.fx, xr) < 0) {\n                epsilon = error(xi, xr);\n                if (increaseFunction) {\n                    xl = xi;\n                }\n                else {\n                    xr = xi;\n                }\n\n            }\n            else {\n                epsilon = error(xi, xl);\n                if (increaseFunction) {\n                    xr = xi;\n                }\n                else {\n                    xl = xi;\n                }\n\n            }\n            data['xl'][n] = xl;\n            data['xr'][n] = xr;\n            data['x'][n] = xi.toFixed(8);\n            data['error'][n] = Math.abs(epsilon).toFixed(8);\n            n++;\n\n        } while (Math.abs(epsilon) > 0.000001);\n\n        this.createTable(data['xl'], data['xr'], data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true\n        })\n\n\n    }\n\n    createTable(xl, xr, x, error) {\n        dataInTable = []\n        for (var i = 0; i < xl.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                xl: xl[i],\n                xr: xr[i],\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    async handleAPI() {\n\n        const response = await falsepos_API();\n        console.log(response);\n        this.setState({\n            fx: response.fx,\n            xl: response.xl,\n            xr: response.xr\n        })\n        const { fx, xl, xr } = this.state;\n\n        this.false_position(parseFloat(xl), parseFloat(xr));\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n    render() {\n        let { fx, xl, xr } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>False Position</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"#f2f2f2\", borderRadius: \"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h2>X<sub>L</sub></h2><Input size=\"large\" name=\"xl\" style={InputStyle}></Input>\n                            <h2>X<sub>R</sub></h2><Input size=\"large\" name=\"xr\" style={InputStyle}></Input><br /><br />\n                            <div className=\"row\">\n                                <div className=\"col-3\">\n                                    <Button id=\"submit_button\" onClick={\n                                        () => this.false_position(parseFloat(xl), parseFloat(xr))\n                                    }\n                                        style={{ background: \"#4caf50\", color: \"white\" }}>Submit</Button>\n                                </div>\n                                <div className=\"col\">\n                                    <Button id=\"submit_button_api\" onClick={() => this.handleAPI()}\n                                        style={{ background: \"blue\", color: \"white\" }}>Calculate from data that get from API</Button>\n                                </div>\n                            </div>\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"False Position\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#f2f2f2\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <label style={{ color: \"black\" }}>f(x): {fx}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>L</sub>: {xl}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>R</sub>: {xr}</label><br />\n                            <Table columns={columns} bordered={true} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}\n                            ></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\nexport default FalsePosition;","D:\\Destop\\TypeScript\\numer\\src\\Calculate\\Root of Equation\\Newton-raphson.js",["70"],"import React, { Component } from 'react'\nimport { Card, Input, Button, Table } from 'antd';\nimport '../../screen.css';\nimport 'antd/dist/antd.css';\nimport { error, func, funcDiff, newton_API } from '../../services/Services';\nimport Graph from '../../components/Graph';\n\nconst InputStyle = {\n    background: \"white\",\n    color: \"black\",\n    fontWeight: \"bold\",\n    fontSize: \"24px\"\n};\nvar dataInTable;\nconst columns = [\n    {\n        title: \"Iteration\",\n        dataIndex: \"iteration\",\n        key: \"iteration\"\n    },\n    {\n        title: \"X\",\n        dataIndex: \"x\",\n        key: \"x\"\n    },\n    {\n        title: \"Error\",\n        key: \"error\",\n        dataIndex: \"error\"\n    }\n];\n\nclass Newton extends Component {\n\n    constructor() {\n        super();\n        /*\n        this.state = {\n            fx: \"\",\n            x0: 0,\n            showOutputCard: false,\n            showGraph: false\n        }\n        */\n        this.state = this.getInitialState();\n        this.handleChange = this.handleChange.bind(this);\n        this.newton_raphson = this.newton_raphson.bind(this);\n        this.handleAPI = this.handleAPI.bind(this);\n    }\n\n    getInitialState = () => ({\n        fx: \"\",\n        x0: 0,\n        showOutputCard: false,\n        showGraph: false\n    })\n\n    newton_raphson(xold) {\n        var xnew = 0;\n        var epsilon = parseFloat(0.000000);\n        var n = 0;\n        var data = []\n        data['x'] = []\n        data['error'] = []\n        do {\n            xnew = xold - (func(this.state.fx, xold) / funcDiff(xold));\n            epsilon = error(xnew, xold)\n            data['x'][n] = xnew.toFixed(8);\n            data['error'][n] = Math.abs(epsilon).toFixed(8);\n            n++;\n            xold = xnew;\n        } while (Math.abs(epsilon) > 0.000001);\n\n        this.createTable(data['x'], data['error']);\n        this.setState({\n            showOutputCard: true,\n            showGraph: true\n        })\n\n\n    }\n    createTable(x, error) {\n        dataInTable = []\n        for (var i = 0; i < x.length; i++) {\n            dataInTable.push({\n                iteration: i + 1,\n                x: x[i],\n                error: error[i]\n            });\n        }\n\n    }\n\n    async handleAPI() {\n\n        const response = await newton_API();\n        console.log(response);\n        this.setState({\n            fx: response.fx,\n            xold: response.xl,\n        })\n        const { fx, xold } = this.state;\n\n        this.newton_raphson(parseFloat(xold));\n\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    render() {\n        let { fx, x0 } = this.state;\n        return (\n            <div style={{ background: \"#FFFF\", padding: \"30px\" }}>\n                <h2 style={{ color: \"black\", fontWeight: \"bold\" }}>Newton Raphson</h2>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <Card\n                            bordered={true}\n                            style={{ background: \"#f2f2f2\", borderRadius: \"15px\", color: \"#FFFFFFFF\" }}\n                            onChange={this.handleChange}\n                        >\n                            <h2>f(x)</h2><Input size=\"large\" name=\"fx\" style={InputStyle}></Input>\n                            <h2>X<sub>0</sub></h2><Input size=\"large\" name=\"x0\" style={InputStyle}></Input><br /><br />\n                            <div className=\"row\">\n                                <div className=\"col-3\">\n                                    <Button id=\"submit_button\" onClick={\n                                    () => this.newton_raphson(parseFloat(x0))\n                                }\n                                    style={{ background: \"#4caf50\", color: \"white\" }}>Submit</Button>\n                                </div>\n                                <div className=\"col\">\n                                    <Button id=\"submit_button_api\" onClick={() => this.handleAPI()}\n                                    style={{ background: \"blue\", color: \"white\" }}>Calculate from data that get from API</Button>\n                                </div>\n                            </div>\n\n                        </Card>\n                    </div>\n                    <div className=\"col\">\n                        {this.state.showGraph && <Graph fx={fx} title=\"Newton-Raphson\" />}\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {this.state.showOutputCard &&\n                        <Card\n                            title={\"Output\"}\n                            bordered={true}\n                            style={{ width: \"100%\", background: \"#f2f2f2\", color: \"#FFFFFFFF\" }}\n                            id=\"outputCard\"\n                        >\n                            <label style={{ color: \"black\" }}>f(x): {fx}</label><br />\n                            <label style={{ color: \"black\" }}>X<sub>0</sub>: {x0}</label><br />\n                            <Table columns={columns} bordered={true} dataSource={dataInTable} bodyStyle={{ fontWeight: \"bold\", fontSize: \"18px\", color: \"black\" }}\n                            ></Table>\n                        </Card>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\nexport default Newton;","D:\\Destop\\TypeScript\\numer\\src\\services\\Services.js",[],"D:\\Destop\\TypeScript\\numer\\src\\components\\Graph.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":123,"column":17,"nodeType":"77","messageId":"78","endLine":123,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":102,"column":17,"nodeType":"77","messageId":"78","endLine":102,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":111,"column":17,"nodeType":"77","messageId":"78","endLine":111,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":146,"column":17,"nodeType":"77","messageId":"78","endLine":146,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":102,"column":17,"nodeType":"77","messageId":"78","endLine":102,"endColumn":19},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'fx' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]